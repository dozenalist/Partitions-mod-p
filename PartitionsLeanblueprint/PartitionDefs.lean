import Mathlib.Data.Multiset.Basic
import Mathlib.Combinatorics.Enumerative.Partition
import PartitionsLeanblueprint.ModuloDefs2
import PartitionsLeanblueprint.PrimaryLemmas


/- The goal of this file is to define the partition function and ramanujan congruences,
and to ultimately prove that if there exists a ramanujan congruence mod ‚Ñì then f‚Ñì|ùì§ = 0 -/

open Nat

def partition (n : ‚Ñï) : ‚Ñï :=
  Fintype.card (Partition n)


def ramanujan_congruence' (‚Ñì Œ≤ : ‚Ñï) : Prop :=
  ‚àÄ n, ‚Ñì ‚à£ partition (‚Ñì*n - Œ≤)


lemma ramanujan_congruence_unique (‚Ñì : ‚Ñï) [Fact (Nat.Prime ‚Ñì)] :
    ‚àÉ Œ≤, ramanujan_congruence' ‚Ñì Œ≤ ‚Üí ramanujan_congruence' ‚Ñì (Œ¥ ‚Ñì) := by
  sorry

abbrev ramanujan_congruence ‚Ñì := ramanujan_congruence' ‚Ñì (Œ¥ ‚Ñì)


variable {‚Ñì : ‚Ñï} [Fact (Nat.Prime ‚Ñì)]


theorem TheBigOne [Fact (‚Ñì ‚â• 13)] : ¬¨ ramanujan_congruence ‚Ñì := sorry


theorem fl_U_zero : ramanujan_congruence ‚Ñì ‚Üí f ‚Ñì |ùì§ = 0 := sorry
