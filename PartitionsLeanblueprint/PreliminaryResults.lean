import PartitionsLeanblueprint.ModularFormDefs
import PartitionsLeanblueprint.ModuloDefs2
import PartitionsLeanblueprint.BasicOperators
import Mathlib.Logic.Function.Iterate
import Mathlib.Data.Nat.Prime.Defs


open ModularFormDefs Integer Modulo2

infixl:30 "mod" => Reduce

syntax:30 term " (mod " term ")" : term

macro_rules
  | `($a (mod $l)) => `(Reduce $a $l)

local notation "ùîÄ" => Filtration


infixl:80 "**" => pow


variable {‚Ñì n : ‚Ñï} [NeZero ‚Ñì] [NeZero (‚Ñì - 1)] [Fact (Nat.Prime ‚Ñì)]
variable {k j : ZMod (‚Ñì-1)}
variable {a b : ModularFormMod ‚Ñì k}

open Nat Finset

@[simp]
theorem Pow_Prime {n : ‚Ñï} {a : ModularFormMod ‚Ñì k} :
  (a ** ‚Ñì) n = if ‚Ñì ‚à£ n then (a (n / ‚Ñì)) ^ ‚Ñì else 0 := by
  by_cases h : ‚Ñì ‚à£ n
  simp [pow_apply,h]
  obtain ‚ü®k,hk,rfl‚ü© := h
  have : ‚Ñì * k / ‚Ñì = k := by refine Eq.symm (Nat.eq_div_of_mul_eq_right ?_ rfl); exact Ne.symm (NeZero.ne' ‚Ñì)
  rw[this, multinomial]; simp
  sorry
  simp[pow_apply,h]
  sorry

-- This is by Freshman's Dream, but the definition of Pow makes it hard to work with


@[simp]
lemma flt {p : ‚Ñï} {n : ZMod p} [Fact (Nat.Prime p)] : n ^ p = n := ZMod.pow_card n



theorem U_pow_l_eq_self_sub_Theta_pow_l_minus_one' {a : ModularFormMod ‚Ñì k} :
  (a|ùì§) ** ‚Ñì == (a -l (Œò^[‚Ñì - 1] a)) (by simp) := by
  intro n; simp[ZMod.pow_card_sub_one]; symm; calc
    _ = if (n : ZMod ‚Ñì) = 0 then a n else 0 := by
      by_cases h : (n : ZMod ‚Ñì) = 0 <;> simp[h]
    _ = _ := by
      by_cases h : (n : ZMod ‚Ñì) = 0
      have h' : ‚Ñì ‚à£ n := (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mp h
      simp[h,h']; congr
      rw [Nat.mul_div_cancel_left' h']
      have h': ¬¨ ‚Ñì ‚à£ n := by contrapose! h; exact (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mpr h
      simp[h,h']


-- lemma blish {a : ModularFormMod ‚Ñì k} {n : ‚Ñï} :
--   ((a|ùì§) ** ‚Ñì) n = 0 := by rw[U_pow_l_eq_self_sub_Theta_pow_l_minus_one']; simp


def thing (a : ModularFormMod ‚Ñì k) := a - (Mcongr (by simp) (Œò^[‚Ñì - 1] a))

lemma k_l : k * ‚Ñì = k := by
  calc
    k * ‚Ñì = k * (‚Ñì - 1 + 1) := by simp
    _ = k * (‚Ñì - 1) + k := by ring
    _ = k * 0 + k := by
      congr; sorry
    _ = k := by simp only [mul_zero, zero_add]


theorem U_pow_l_eq_self_sub_Theta_pow_l_minus_one {a : ModularFormMod ‚Ñì k} :
(Mcongr (k_l) ((a|ùì§) ** ‚Ñì)) = thing a := by
  ext n; simp[thing]
  rw[ZMod.pow_card_sub_one]; simp; symm; calc
    _ = if (n : ZMod ‚Ñì) = 0 then a n else 0 := by
      by_cases h : (n : ZMod ‚Ñì) = 0 <;> simp[h]
    _ = _ := by
      by_cases h : (n : ZMod ‚Ñì) = 0
      have h' : ‚Ñì ‚à£ n := (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mp h
      simp[h,h']; congr
      rw [Nat.mul_div_cancel_left' h']
      have h': ¬¨ ‚Ñì ‚à£ n := by contrapose! h; exact (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mpr h
      simp[h,h']


theorem Filtration_Log {i : ‚Ñï} : ùîÄ (a ** i) = i * ùîÄ a := sorry



def Œ¥ (‚Ñì : ‚Ñï) : ‚Ñ§ := (‚Ñì^2 - 1) / 24
-- or Œ¥‚Ñì : ‚Ñ§ := (‚Ñì^2 - 1) / 24
