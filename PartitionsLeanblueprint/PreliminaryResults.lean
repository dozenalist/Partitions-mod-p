import PartitionsLeanblueprint.ModularFormDefs
import PartitionsLeanblueprint.ModuloDefs2
import Mathlib.Logic.Function.Iterate
import Mathlib.Data.Nat.Prime.Defs


open ModularFormDefs Integer Modulo2

infixl:30 "mod" => Reduce

syntax:30 term " (mod " term ")" : term

macro_rules
  | `($a (mod $l)) => `(Reduce $a $l)

local notation "ùîÄ" => Filtration

--infixl:80 "^^^" => pow
infixl:80 "**" => pow


variable {n ‚Ñì k j : ‚Ñï} [NeZero ‚Ñì] [Fact (Nat.Prime ‚Ñì)] [NeZero (‚Ñì - 1)]
variable {a b : IntegerModularForm k}

#check a (mod ‚Ñì+1)
#check ùîÄ (a * b (mod ‚Ñì))


-- def Theta (a : ModularFormMod ‚Ñì k) : ModularFormMod ‚Ñì k where
--   sequence := fun n ‚Ü¶ n * a n
--   modular := sorry

-- def U_Operator (a : ModularFormMod ‚Ñì k) : ModularFormMod ‚Ñì k where
--   sequence := fun n ‚Ü¶ a (‚Ñì * n)
--   modular := sorry

variable {k j : ZMod (‚Ñì-1)}
variable {a b : ModularFormMod ‚Ñì k}

local notation "Œò" => Theta

postfix:50 "|ùì§" => U_Operator


#check Œò (a ** 3 * b)|ùì§
-- Theta operator binds tighter
#check a ** 3 * b

@[simp]
lemma Pow_Prime {n : ‚Ñï} {a : ModularFormMod ‚Ñì k} :
  (a ** ‚Ñì) n = if ‚Ñì ‚à£ n then (a (n / ‚Ñì)) ^ ‚Ñì else 0 := by
  by_cases h : ‚Ñì ‚à£ n
  simp[h]
  sorry
  sorry


-- This is by Freshman's Dream, but the definition of Pow makes it hard to work with
-- bad way of writing it


lemma flt {p : ‚Ñï} {n : ZMod p} [Fact (Nat.Prime p)] : n ^ p = n := ZMod.pow_card n


@[simp]
lemma U_apply : (a|ùì§) n = a (‚Ñì * n) := rfl

@[simp]
lemma Theta_apply : Œò a n = n * a n := rfl

lemma help' {k : ZMod (‚Ñì - 1)} {n : ‚Ñï} : k = (k + 0 * n) := by simp

-- no idea why its (n : ‚Ñï) and not ‚Ñï
def Theta_pow : (n : ‚Ñï) ‚Üí ModularFormMod ‚Ñì k ‚Üí ModularFormMod ‚Ñì (k + n * 2)
| 0     => fun f ‚Ü¶ Mcongr (by simp) f
| n + 1 => fun f ‚Ü¶ Mcongr (by simpa using by group) (Theta (Theta_pow n f))


macro_rules
  | `(Œò^[$n]) => `(Theta_pow $n)


#check Theta_pow 3 (a ** 2 * b)
#check Œò^[3] (a ** 2 * b)|ùì§
#check Œò (a ** 2 * b)


lemma help (k : ZMod ‚Ñì): (k + ‚Üë0 * 2) = k := by simp

@[simp]
lemma Theta_pow_zero {a : ModularFormMod ‚Ñì k} : Œò^[0] a = Mcongr (by simp) a := rfl

@[simp]
lemma Theta_pow_succ {n : ‚Ñï} {a : ModularFormMod ‚Ñì k} :
  Œò^[n + 1] a = Mcongr (by simp; group) (Œò (Œò^[n] a)) := rfl

def Œ¥ (‚Ñì : ‚Ñï) : ‚Ñ§ := (‚Ñì^2 - 1) / 24
-- or Œ¥‚Ñì : ‚Ñ§ := (‚Ñì^2 - 1) / 24


@[simp]
lemma cast_eval {k j : ZMod (‚Ñì -1) } {h : k = j} {n : ‚Ñï} {a : ModularFormMod ‚Ñì k} :
  Mcongr h a n = a n := by
  subst h; rfl


def eq {k j : ZMod (‚Ñì - 1)} (a : ModularFormMod ‚Ñì k) (b : ModularFormMod ‚Ñì j) :=
  ‚àÄ n, a n = b n
-- two modular forms of different weight can be "equal" if they are the same sequence
-- might be a bad idea, idk

infixl:50 "=" => eq

@[simp]
lemma cast_equal {k j : ZMod (‚Ñì -1) } {h : k = j} {a : ModularFormMod ‚Ñì k} :
  Mcongr h a = a := Œª _ ‚Ü¶ cast_eval



@[simp]
lemma Theta_Pow_apply {n j : ‚Ñï} {a : ModularFormMod ‚Ñì k} : Œò^[j] a n = n ^ j * a n := by
  induction j with
  | zero => simp
  | succ j ih => simp[ih]; ring





def thing (a : ModularFormMod ‚Ñì k) :=  a - (Mcongr (by simp only [CharP.cast_eq_zero, zero_mul, add_zero]) (Œò^[‚Ñì - 1] a))

lemma k_l : k * ‚Ñì = k := by
  calc
    k * ‚Ñì = k * (‚Ñì - 1 + 1) := by simp
    _ = k * (‚Ñì - 1) + k := by ring
    _ = k * 0 + k := by
      simp only [mul_zero, zero_add, add_eq_right]; refine mul_eq_zero_of_right k ?_;
      have : ((‚Ñì - 1) : ZMod (‚Ñì - 1)) = 0 := by sorry
      simp only [this]
    _ = k := by simp only [mul_zero, zero_add]


lemma U_pow_l_eq_self_sub_Theta_pow_l_minus_one' {a : ModularFormMod ‚Ñì k} :
  ((a|ùì§) ** ‚Ñì) = (thing a) := by
  intro n; simp[U_apply, Theta_apply, thing]
  rw [ZMod.pow_card_sub_one]; simp; symm; calc
    _ = if (n : ZMod ‚Ñì) = 0 then a n else 0 := by
      by_cases h : (n : ZMod ‚Ñì) = 0 <;> simp[h]
    _ = _ := by
      by_cases h : (n : ZMod ‚Ñì) = 0
      have h' : ‚Ñì ‚à£ n := (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mp h
      simp[h,h']; congr
      rw [Nat.mul_div_cancel_left' h']
      have h': ¬¨ ‚Ñì ‚à£ n := by contrapose! h; exact (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mpr h
      simp[h,h']



-- theorem U_pow_l_eq_self_sub_Theta_pow_l_minus_one {a : ModularFormMod ‚Ñì k} :
-- (mcast (k_l) ((a|ùì§) ** ‚Ñì)) = thing a := by
--   ext n; simp[thing,mcast]
--   rw[ZMod.pow_card_sub_one]; simp; symm; calc
--     _ = if (n : ZMod ‚Ñì) = 0 then a n else 0 := by
--       by_cases h : (n : ZMod ‚Ñì) = 0 <;> simp[h]
--     _ = _ := by
--       by_cases h : (n : ZMod ‚Ñì) = 0
--       have h' : ‚Ñì ‚à£ n := (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mp h
--       simp[h,h']; congr
--       rw [Nat.mul_div_cancel_left' h']
--       have h': ¬¨ ‚Ñì ‚à£ n := by contrapose! h; exact (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mpr h
--       simp[h,h']


def Filtration_mul (i : ‚Ñï): Option ‚Ñï ‚Üí Option ‚Ñï
  | none => none
  | some n => i * n

instance : HMul ‚Ñï (Option ‚Ñï) (Option ‚Ñï) where
  hMul := Filtration_mul


#check (mcast (by sorry) a) - (Œò^[‚Ñì - 1] a)

theorem Filtration_Log {i : ‚Ñï} : ùîÄ (a ** i) = i * ùîÄ a := sorry

variable {a : Fin (3 ^ 2 - 3)} {b : Fin (6)}
#check b + a
