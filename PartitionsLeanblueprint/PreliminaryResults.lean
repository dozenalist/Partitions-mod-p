import PartitionsLeanblueprint.ModuloDefs2
import PartitionsLeanblueprint.BasicOperators
import PartitionsLeanblueprint.PowFacts
import Mathlib.FieldTheory.Finite.Basic

/- This file states and proves some basic theorems, some of which are found
in the introduction of the paper -/

open Modulo2

noncomputable section

variable {‚Ñì n : ‚Ñï} [NeZero ‚Ñì] [Fact (Nat.Prime ‚Ñì)]
variable {k j : ZMod (‚Ñì-1)}
variable {a b : ModularFormMod ‚Ñì k}

open ZMod Nat


theorem U_pow_l_eq_self_sub_Theta_pow_l_sub_one {a : ModularFormMod ‚Ñì k} :
  a|ùì§ ** ‚Ñì == (a -l Œò^[‚Ñì - 1] a) (by simp) := by
  intro n; simp[Pow_Prime]; symm; calc
    _ = if (n : ZMod ‚Ñì) = 0 then a n else 0 := by
      by_cases h : (n : ZMod ‚Ñì) = 0 <;> simp only [h, reduceIte, sub_zero, sub_self]
    _ = _ := by
      by_cases h : (n : ZMod ‚Ñì) = 0
      have  h' : ‚Ñì ‚à£ n := (natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mp h
      simp only [h, reduceIte, h']; congr
      rw [Nat.mul_div_cancel_left' h']
      have h': ¬¨ ‚Ñì ‚à£ n := by contrapose! h; exact (natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mpr h
      simp only [h, reduceIte, h']



def thing (a : ModularFormMod ‚Ñì k) := a - (Mcongr (by simp) (Œò^[‚Ñì - 1] a))

lemma k_l : k * ‚Ñì = k := by
  calc
    k * ‚Ñì = k * (‚Ñì - 1 + 1) := by simp
    _ = k * (‚Ñì - 1) + k := by ring
    _ = k * 0 + k := by
      congr; trans ‚Üë(‚Ñì - 1)
      refine Eq.symm (cast_pred ?_); exact pos_of_neZero ‚Ñì
      exact natCast_self (‚Ñì - 1)
    _ = k := by simp only [mul_zero, zero_add]


theorem U_pow_l_eq_self_sub_Theta_pow_l_sub_one' {a : ModularFormMod ‚Ñì k} :
(Mcongr (k_l) ((a|ùì§) ** ‚Ñì)) = thing a := by
  ext n; simp[thing, Pow_Prime]
  symm; calc
    _ = if (n : ZMod ‚Ñì) = 0 then a n else 0 := by
      by_cases h : (n : ZMod ‚Ñì) = 0 <;> simp[h]
    _ = _ := by
      by_cases h : (n : ZMod ‚Ñì) = 0
      have h' : ‚Ñì ‚à£ n := (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mp h
      simp only [h, reduceIte, h']; congr
      rw [Nat.mul_div_cancel_left' h']
      have h': ¬¨ ‚Ñì ‚à£ n := by contrapose! h; exact (ZMod.natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mpr h
      simp[h, reduceIte, h']




lemma Theta_pow_‚Ñì_eq_Theta {a : ModularFormMod ‚Ñì k} : Œò^[‚Ñì] a == Œò a := by
  intro n; rw[Theta_Pow_apply, pow_card, Theta_apply]


theorem const_of_Filt_zero {a : ModularFormMod ‚Ñì k} (h : ùîÄ a = 0) : ‚àÉ c : ‚Ñï, a == const c := sorry


theorem Filtration_Log {i : ‚Ñï} {a : ModularFormMod ‚Ñì k} : ùîÄ (a ** i) = i * ùîÄ a := sorry
