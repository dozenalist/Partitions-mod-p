import PartitionsLeanblueprint.ModuloDefs2
import PartitionsLeanblueprint.BasicOperators
import PartitionsLeanblueprint.PowFacts
import Mathlib.FieldTheory.Finite.Basic

/- This file states and proves some basic theorems which are found in the
introduction of the paper, before the beginning of the proof of Theorem 3.1 -/

open Modulo2

noncomputable section

variable {‚Ñì n : ‚Ñï} [NeZero ‚Ñì] [Fact (Nat.Prime ‚Ñì)]
variable {k j : ZMod (‚Ñì-1)}
variable {a b : ModularFormMod ‚Ñì k}

open ZMod Nat ModularFormDefs.Integer

-- This is the cleaner way of stating it, using == and -l
theorem U_pow_l_eq_self_sub_Theta_pow_l_sub_one {a : ModularFormMod ‚Ñì k} :
  a|ùì§ ** ‚Ñì == (a -l Œò^[‚Ñì - 1] a) (by simp) := by
  intro n; simp[Pow_Prime]; symm; calc
    _ = if (n : ZMod ‚Ñì) = 0 then a n else 0 := by
      by_cases h : (n : ZMod ‚Ñì) = 0 <;> simp only [h, reduceIte, sub_zero, sub_self]
    _ = _ := by
      by_cases h : (n : ZMod ‚Ñì) = 0
      have h' : ‚Ñì ‚à£ n := (natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mp h
      simp only [h, h']; congr
      rw [Nat.mul_div_cancel_left' h']
      have h': ¬¨ ‚Ñì ‚à£ n := by contrapose! h; exact (natCast_zmod_eq_zero_iff_dvd n ‚Ñì).mpr h
      simp only [h, reduceIte, h']



theorem const_of_Filt_zero {a : ModularFormMod ‚Ñì k} (h : ùîÄ a = 0) : ‚àÉ c : ZMod ‚Ñì, a == const c := by
  have wa0 : hasWeight a 0 := Weight_of_Filt h
  obtain ‚ü®b,hb‚ü© := wa0
  sorry

theorem Filtration_Log {i : ‚Ñï} {a : ModularFormMod ‚Ñì k} : ùîÄ (a ** i) = i * ùîÄ a := sorry
-- it may be useful to use the Filt_decomp lemmas to prove this.


lemma Filtration_congruence (a : ModularFormMod ‚Ñì k) [NeZero a] : (ùîÄ a : ZMod (‚Ñì - 1)) = k := sorry
