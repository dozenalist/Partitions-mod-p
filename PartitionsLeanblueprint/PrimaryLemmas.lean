import PartitionsLeanBlueprint.PreliminaryResults

/- This file defines Œî and f‚Ñì. It states lemmas 2.1 and 3.2,
and proves lemma 3.3 assuming them. This is currently where the main
body of the paper lives. -/

noncomputable section

open Modulo2 Finset.Nat

variable {‚Ñì n : ‚Ñï} [NeZero ‚Ñì] [Fact (Nat.Prime ‚Ñì)]
variable {k j : ZMod (‚Ñì-1)}
variable {a b : ModularFormMod ‚Ñì k}

def Œ¥ (‚Ñì : ‚Ñï) : ‚Ñï := (‚Ñì^2 - 1) / 24
-- Œ¥‚Ñì ?

-- The series expansion of ‚àè n, (1-q^n)
def Etaish : (n : ‚Ñï) ‚Üí ZMod ‚Ñì
  | 0 => 0
  | n + 1 =>
    if h : (‚àÉ m : ‚Ñ§, n + 1 = m * (3*m - 1) / 2)
      then
        let m := Classical.choose h
        (-1) ^ m
      else 0


def Delta : ModularFormMod ‚Ñì 12 where

  sequence n := match n with
    | 0 => 0
    | n + 1 => (ZModpow Etaish 24) n

  modular := sorry

notation "Œî" => Delta



def f (‚Ñì : ‚Ñï) [NeZero ‚Ñì] [Fact (Nat.Prime ‚Ñì)] : ModularFormMod ‚Ñì (12 * Œ¥ ‚Ñì) := Œî ** Œ¥ ‚Ñì
-- or f‚Ñì : ModularFormMod ‚Ñì (((‚Ñì^2 - 1)/2) : ‚Ñï) := Mcongr (Œî ** Œ¥ ‚Ñì) (by sorry)


instance : NeZero (f ‚Ñì) where
  out := sorry


lemma not_dvd_filt : ¬¨ ‚Ñì ‚à£ (‚Ñì ^ 2 - 1) / 2 := by
    intro h
    by_cases l2 : ‚Ñì = 2
    simp only [l2, Nat.reducePow, Nat.add_one_sub_one, Nat.reduceDiv, Nat.dvd_one,
      OfNat.ofNat_ne_one] at h

    have : Odd ‚Ñì := Nat.Prime.odd_of_ne_two Fact.out l2;
    have h_div_full : ‚Ñì ‚à£ (‚Ñì ^ 2 - 1) / 2 * 2 := by
      exact Nat.dvd_mul_right_of_dvd h 2

    have : ‚Ñì ‚à£ (‚Ñì ^ 2 - 1) := by
      trans (‚Ñì ^ 2 - 1) / 2 * 2
      exact Nat.dvd_mul_right_of_dvd h 2
      apply dvd_of_eq

      apply Nat.div_two_mul_two_of_even
      apply Nat.Odd.sub_odd (Odd.pow this)
      exact Nat.odd_iff.mpr rfl

    have don : ‚Ñì ^ 2 - 1 = (‚Ñì + 1) * (‚Ñì - 1) := by
        trans ‚Ñì * ‚Ñì - 1
        rw[pow_two]
        exact mul_self_tsub_one ‚Ñì

    rw[don] at this
    have bla : ‚Ñì ‚à£ (‚Ñì + 1) ‚à® ‚Ñì ‚à£ (‚Ñì - 1) := (Nat.Prime.dvd_mul Fact.out).mp this
    have lg2 : ‚Ñì ‚â• 2 := Nat.Prime.two_le Fact.out
    rcases bla with h|h
    contrapose! h
    refine (Nat.not_dvd_iff_lt_mul_succ (‚Ñì + 1) ?_).mpr ?_
    exact Nat.pos_of_neZero ‚Ñì
    use 1; constructor <;> linarith
    contrapose! h
    refine Nat.not_dvd_of_pos_of_lt ?_ ?_
    exact Nat.zero_lt_sub_of_lt lg2
    exact Nat.sub_one_lt_of_lt lg2


@[simp] lemma fl_zero [Fact (‚Ñì ‚â• 5)]: f ‚Ñì 0 = 0 := by
  simp[f, Œ¥, pow_apply, antidiagonalTuple_zero_right]; constructor; rfl
  have lg5 : ‚Ñì ‚â• 5 := Fact.out
  have fivesq : 5 * 5 = 25 := rfl
  have lsq : ‚Ñì ^ 2 ‚â• 25 := by
    rw[pow_two, ‚Üê fivesq]; exact mul_le_mul lg5 lg5 (Nat.zero_le 5) (Nat.zero_le ‚Ñì)
  exact Nat.le_sub_one_of_lt lsq



lemma Filt_fl : ùîÄ (f ‚Ñì) = (‚Ñì^2 - 1)/2  := sorry



--Lemma 2.1

-- (1)
theorem Filt_Theta_bound (a : ModularFormMod ‚Ñì k) : ùîÄ (Œò a) ‚â§ ùîÄ a + ‚Ñì + 1 := sorry

-- (2)
theorem Filt_Theta_iff {a : ModularFormMod ‚Ñì k} :
  ùîÄ (Œò a) = ùîÄ a + ‚Ñì + 1 ‚Üî ¬¨ ‚Ñì ‚à£ ùîÄ a := sorry



-- Lemma 3.2
theorem le_Filt_Theta_fl : ‚àÄ m, ùîÄ (f ‚Ñì) ‚â§ ùîÄ (Œò^[m] (f ‚Ñì)) := sorry



-- Lemma 3.3

-- (1) stated here as an implication, instead of an or statement
theorem Filt_Theta_pow_l_sub_one : ¬¨ ‚Ñì ‚à£ ùîÄ (Œò^[‚Ñì - 1] (f ‚Ñì)) ‚Üí ùîÄ (Œò^[‚Ñì - 1] (f ‚Ñì)) = (‚Ñì^2 - 1)/2 := by
  intro h

  have Filt_eq : ùîÄ (Œò (f ‚Ñì)) = (‚Ñì^2 - 1) / 2 + ‚Ñì + 1 := by
    rw[‚Üê Filt_fl]; apply Filt_Theta_iff.2; rw[Filt_fl]
    exact not_dvd_filt

  rw [Filt_eq_of_Mod_eq Theta_pow_‚Ñì_eq_Theta.symm, Filt_eq_of_Mod_eq Theta_pow_pred] at Filt_eq

  have :  ùîÄ (Œò (Theta_pow (‚Ñì - 1) (f ‚Ñì))) - (‚Ñì + 1) = ùîÄ (Theta_pow (‚Ñì - 1) (f ‚Ñì)) := by
    refine Eq.symm (Nat.eq_sub_of_add_eq ?_); rw[‚Üê add_assoc]; symm
    apply Filt_Theta_iff.2 h

  rw [‚Üê this]
  exact Nat.sub_eq_of_eq_add Filt_eq


-- (2) We now need that ‚Ñì ‚â• 5, here to guarantee that Œ¥ ‚Ñì ‚â• 1
theorem Filt_U_pos [Fact (‚Ñì ‚â• 5)] : ‚Ñì ‚à£ ùîÄ (Œò^[‚Ñì - 1] (f ‚Ñì)) ‚Üí ùîÄ (f ‚Ñì |ùì§) > 0 := by

  intro h; by_contra! filto; rw[nonpos_iff_eq_zero] at filto
  have folly : ùîÄ (f ‚Ñì |ùì§ ** ‚Ñì) = 0 := by rw[Filtration_Log, filto, mul_zero]
  obtain ‚ü®c,hc‚ü© := const_of_Filt_zero filto
  have fconn : (f ‚Ñì |ùì§) ** ‚Ñì == (const c) ** ‚Ñì := by
    intro n; rw[pow_apply, pow_apply]; congr
    ext x; congr; ext y; rw[hc (x y)]
  have (c) : ‚àÉ d : ZMod ‚Ñì, (const c) ** ‚Ñì == const d := by
    use c ^ ‚Ñì; exact const_pow c ‚Ñì

  obtain ‚ü®d,hd‚ü© := this c

  have Thecon : ((f ‚Ñì) -l Œò^[‚Ñì - 1] (f ‚Ñì)) (by simp) == const d := by
    calc
      _ == (f ‚Ñì |ùì§)**‚Ñì := U_pow_l_eq_self_sub_Theta_pow_l_sub_one.symm
      _ == const c**‚Ñì := fconn
      _ == const d := hd

  have zepo : ‚àÄ n, ((f ‚Ñì) -l Œò^[‚Ñì - 1] (f ‚Ñì))
      (by simp only [CharP.cast_eq_zero, zero_mul, add_zero]) n = 0 := by
    intro n; match n with

    | 0 =>
      simp only [sub_congr_left_apply, Theta_Pow_apply, Nat.cast_zero, ZMod.pow_card_sub_one,
          ne_eq, not_true_eq_false, reduceIte, zero_mul, sub_zero, fl_zero]

    | n + 1 => rw[Thecon (n + 1)]; rfl

  have feq : f ‚Ñì == Œò^[‚Ñì - 1] (f ‚Ñì) := by
    intro n; specialize zepo n
    simp only [sub_congr_left_apply, sub_eq_zero] at zepo
    exact zepo

  apply Filt_eq_of_Mod_eq at feq
  have wrong : ‚Ñì ‚à£ ùîÄ (f ‚Ñì) := by rw[feq]; exact h
  let right := @not_dvd_filt ‚Ñì _ _
  rw[Filt_fl] at wrong
  exact right wrong


theorem Lemma_stitch [Fact (‚Ñì ‚â• 5)] : ùîÄ (f ‚Ñì |ùì§) = 0 ‚Üí ùîÄ (Œò^[‚Ñì - 1] (f ‚Ñì)) = (‚Ñì^2 - 1)/2 := by
  intro h
  have h' : ¬¨ ùîÄ (f ‚Ñì |ùì§) > 0 := Eq.not_gt h
  have : ¬¨ ‚Ñì ‚à£ ùîÄ (Œò^[‚Ñì - 1] (f ‚Ñì)) := by contrapose! h'; exact Filt_U_pos h'
  exact Filt_Theta_pow_l_sub_one this
