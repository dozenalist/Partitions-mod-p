import PartitionsLeanblueprint.PrimaryLemmas



/- This file proves from after Lemma 3.3 (line 3.5) to line 3.8
It proves that ùîÄ (Œò^[(‚Ñì + 3)/2] (f ‚Ñì)) = (‚Ñì^2 - 1)/2 + 4.
From here on, information about a basis will be needed -/


opaque ‚Ñì : ‚Ñï  -- this may be a bad idea, but it made everything slightly easier
variable [Fact (Nat.Prime ‚Ñì)] [Fact (‚Ñì ‚â• 5)]


private instance Oddl : Odd ‚Ñì :=
  let t : ‚Ñì ‚â• 5 := Fact.out
  Nat.Prime.odd_of_ne_two Fact.out (by linarith)


-- (3.6)
theorem Filt_Theta_l_sub_two (flu : f ‚Ñì |ùì§ = 0) : ‚Ñì ‚à£ ùîÄ (Œò^[‚Ñì - 2] (f ‚Ñì)) := by

  have filt_fl : ùîÄ (f ‚Ñì |ùì§) = 0 := flu ‚ñ∏ Filt_zero
  have sub_one : ùîÄ (Œò^[‚Ñì - 1] (f ‚Ñì)) = (‚Ñì^2 - 1) / 2 := Lemma_stitch filt_fl
  by_contra! ndvd
  have lg5 : ‚Ñì ‚â• 5 := Fact.out
  have lrw : ‚Ñì - 1 = (‚Ñì - 2) + 1 := by
    refine (Nat.sub_eq_iff_eq_add ?_).mp rfl; refine (Nat.le_sub_one_iff_lt ?_).mpr ?_ <;> linarith
  have : ùîÄ (f ‚Ñì) = ùîÄ (Œò^[‚Ñì - 2] (f ‚Ñì)) + ‚Ñì + 1 := by
    trans ùîÄ (Œò^[‚Ñì - 1] (f ‚Ñì)); rw [Filt_fl, (Lemma_stitch filt_fl)]
    rw [Filt_Theta_cast lrw, Filt_eq_of_Mod_eq Theta_pow_succ, Filt_Theta_iff.2 ndvd]
  have : ùîÄ (f ‚Ñì) ‚â§ ùîÄ (Œò^[‚Ñì - 2] (f ‚Ñì)) := le_Filt_Theta_fl (‚Ñì - 2)
  linarith


lemma ndvd_of_lel_add_one_div_two {m} (mmle : m ‚â§ (‚Ñì - 1)/2) :
    ¬¨‚Ñì ‚à£ (‚Ñì ^ 2 - 1) / 2 + m * (‚Ñì + 1) := by
    suffices ¬¨ (‚Ñì ^ 2 - 1) / 2 + m * (‚Ñì + 1) ‚â° 0 [MOD ‚Ñì] by
      contrapose! this; exact (Dvd.dvd.zero_modEq_nat this).symm

    have rarw : (‚Ñì ^ 2 - 1) / 2 + m * (‚Ñì + 1) ‚â° (‚Ñì ^ 2 - 1) / 2 + m [MOD ‚Ñì] := by
      rw[mul_add, mul_one]; apply Nat.ModEq.add_left
      suffices m * ‚Ñì ‚â° 0 [MOD ‚Ñì] by
        trans 0 + m; gcongr; rw[zero_add]
      exact Nat.modEq_zero_iff_dvd.mpr ‚ü®m, mul_comm ..‚ü©

    have mm : (‚Ñì ^ 2 - 1) / 2 + m = (‚Ñì ^ 2 + 2*m - 1) / 2 := by
      trans (‚Ñì ^ 2 - 1) / 2 + 2 * m / 2
      congr; exact Nat.eq_div_of_mul_eq_right two_ne_zero rfl
      trans ((‚Ñì ^ 2 - 1) + 2 * m) / 2
      exact Eq.symm (Nat.add_div_of_dvd_left ‚ü®m,rfl‚ü©)
      congr; refine Eq.symm (Nat.sub_add_comm NeZero.one_le)

    have ll : (‚Ñì ^ 2 - ‚Ñì) / 2 + ‚Ñì = (‚Ñì^2 + ‚Ñì) / 2 := by
      trans (‚Ñì ^ 2 - ‚Ñì) / 2 + 2*‚Ñì / 2
      congr; exact Nat.eq_div_of_mul_eq_right two_ne_zero rfl
      trans ((‚Ñì ^ 2 - ‚Ñì) + 2 * ‚Ñì) / 2
      exact Eq.symm (Nat.add_div_of_dvd_left ‚ü®‚Ñì,rfl‚ü©)
      congr 1; rw[two_mul]; rw[‚Üê Nat.sub_add_comm]; omega
      exact Nat.le_pow zero_lt_two

    intro h
    have : (‚Ñì ^ 2 - 1) / 2 + m ‚â° 0 [MOD ‚Ñì] := rarw.symm.trans h
    apply Nat.modEq_zero_iff_dvd.mp at this
    contrapose! this
    refine (Nat.not_dvd_iff_lt_mul_succ ((‚Ñì ^ 2 - 1) / 2 + m) (Nat.pos_of_neZero ‚Ñì)).mpr ?_
    use (‚Ñì - 1) / 2; constructor; calc
      _ = (‚Ñì ^ 2 - ‚Ñì) / 2 := by
        rw[pow_two]; trans (‚Ñì * (‚Ñì - 1)) / 2
        refine Eq.symm (Nat.mul_div_assoc ‚Ñì ?_)
        obtain ‚ü®k,hk‚ü© := Oddl
        rw [hk, Nat.add_sub_cancel_right]; exact Nat.dvd_mul_right 2 k
        congr; exact Nat.mul_sub_one ‚Ñì ‚Ñì
      _ < _ := by
        rw[mm]; refine Nat.div_lt_div_of_lt_of_dvd ?_ ?_
        suffices 2 ‚à£ (‚Ñì^2 - 1) by omega
        have : Odd (‚Ñì^2) := Odd.pow Oddl
        obtain ‚ü®k,hk‚ü© := this
        rw[hk]; rw [Nat.add_sub_cancel_right]; exact Nat.dvd_mul_right 2 k
        have lg5 : ‚Ñì ‚â• 5 := Fact.out
        refine Nat.sub_lt_right_of_lt_add (Nat.le_pow zero_lt_two) ?_
        omega

    rw[mul_add, mul_one]

    have rlw : ‚Ñì * ((‚Ñì - 1) / 2) = (‚Ñì ^ 2 - ‚Ñì) / 2 := by
      rw[pow_two]; trans (‚Ñì * (‚Ñì - 1)) / 2
      refine Eq.symm (Nat.mul_div_assoc ‚Ñì ?_)
      obtain ‚ü®k,hk‚ü© := Oddl
      rw [hk, Nat.add_sub_cancel_right]; exact Nat.dvd_mul_right 2 k
      congr; exact Nat.mul_sub_one ‚Ñì ‚Ñì

    rw[rlw, mm, ll]; refine Nat.div_lt_div_of_lt_of_dvd ?_ ?_
    obtain ‚ü®k, hk‚ü© := Oddl; rw[hk]
    use 2 * k * k + 3 * k + 1; ring
    refine Nat.sub_one_lt_of_le ?_ ?_
    apply add_pos_of_pos_of_nonneg
    exact Nat.pos_of_neZero (‚Ñì ^ 2)
    exact Nat.zero_le (2 * m)
    apply add_le_add_left
    omega


lemma Filt_Theta_lel_add_one_div_two {m} (mle : m ‚â§ (‚Ñì + 1)/2) :
    ùîÄ (Œò^[m] (f ‚Ñì)) = (‚Ñì^2 - 1)/2 + m * (‚Ñì + 1) := by
  induction m with

  | zero => simp only [Theta_pow_zero', Filt_cast, Filt_fl, zero_mul, add_zero]

  | succ m ih =>
    specialize ih (Nat.le_of_succ_le mle)
    have mmle : m ‚â§ (‚Ñì - 1) / 2 := by
      trans (‚Ñì + 1) / 2 - 1 <;> omega

    rw [Theta_pow_succ', Filt_cast, Nat.succ_mul, ‚Üê add_assoc, ‚Üê ih, ‚Üê add_assoc]
    apply Filt_Theta_iff.2; rw[ih]

    exact ndvd_of_lel_add_one_div_two mmle



theorem Filt_Theta_l_add_one_div_two : ‚Ñì ‚à£ ùîÄ (Œò^[(‚Ñì + 1)/2] (f ‚Ñì)) := by

  use ‚Ñì + 1; calc
  _ = (‚Ñì^2 - 1)/2 + (‚Ñì + 1)/2 * (‚Ñì + 1) := Filt_Theta_lel_add_one_div_two (le_refl _)
  _ = ((‚Ñì^2 - 1)) / 2 + (‚Ñì^2 + 2*‚Ñì + 1) / 2 := by
    congr; trans ((‚Ñì + 1) * (‚Ñì + 1)) / 2
    refine Nat.div_mul_right_comm ?_ (‚Ñì + 1)
    obtain ‚ü®k,hk‚ü© := Oddl;
    exact ‚ü®k + 1, by rw[hk]; group‚ü©
    congr; group

  _ = ((‚Ñì^2 - 1) + (‚Ñì^2 + 2*‚Ñì + 1)) / 2 := by
    refine Eq.symm (Nat.add_div_of_dvd_right ?_)
    have Oddl2 : Odd (‚Ñì^2) := Odd.pow Oddl
    obtain ‚ü®k,hk‚ü© := Oddl2
    exact ‚ü®k, by rw[hk, Nat.add_sub_cancel_right]‚ü©

  _ = 2 * (‚Ñì * (‚Ñì + 1)) / 2 := by
    congr; group; rw[mul_two (‚Ñì^2), add_comm, add_assoc, ‚Üê add_assoc, ‚Üê add_assoc]
    have : ‚Ñì ^ 2 - 1 + 1 = ‚Ñì^2 := Nat.sub_add_cancel NeZero.one_le
    rw[this]; ring
  _ = _ :=  Nat.mul_div_right (‚Ñì * (‚Ñì + 1)) zero_lt_two



-- (3.7)
lemma exists_Filt_Theta_l_add_three_div_two :
    ‚àÉ Œ±, ùîÄ (Œò^[(‚Ñì + 3)/2] (f ‚Ñì)) = (‚Ñì^2 - 1)/2 + (‚Ñì + 3)/2 * (‚Ñì + 1) - (Œ± + 1) * (‚Ñì - 1) := by

  have leq : (‚Ñì + 3)/2 = (‚Ñì + 1)/2 + 1 :=
    Nat.div_eq_sub_div zero_lt_two (by linarith)

  rw[leq, add_mul, one_mul, ‚Üê add_assoc, ‚Üê add_assoc,
    ‚Üê Filt_Theta_lel_add_one_div_two (le_refl _)]

  exact Filt_Theta_congruence_of_div' Filt_Theta_l_add_one_div_two rfl



-- Start of page 494

/- Note : Œ± and j are defined differently from the paper.
There is no requirement for them to be ‚â• 1, they are both just natural numbers
Œ± here is Œ± + 1, and j here is j + 1 in the paper. -/

variable [Fact (‚Ñì ‚â• 13)]

lemma alpha_bound_ex {Œ± : ‚Ñï}
    (h : ùîÄ (Œò^[(‚Ñì + 3)/2] (f ‚Ñì)) = (‚Ñì^2 - 1)/2 + (‚Ñì + 3)/2 * (‚Ñì + 1) - (Œ± + 1) * (‚Ñì - 1)) :
  Œ± ‚â§ (‚Ñì + 3) / 2 := by

  have aleb : (‚Ñì^2 - 1)/2 + (‚Ñì + 3)/2 * (‚Ñì + 1) - (Œ± + 1) * (‚Ñì - 1) ‚â• (‚Ñì^2 - 1)/2 := by
    rw[‚Üê h, ‚Üê Filt_fl]; exact le_Filt_Theta_fl _

  have : (‚Ñì + 3)/2 * (‚Ñì + 1) ‚â• (Œ± + 1) * (‚Ñì - 1) := by
    suffices (‚Ñì ^ 2 - 1) / 2 + (‚Ñì + 3) / 2 * (‚Ñì + 1) ‚â• (‚Ñì ^ 2 - 1) / 2 + (Œ± + 1) * (‚Ñì - 1) from
      Nat.add_le_add_iff_left.mp this
    have : (‚Ñì ^ 2 - 1) / 2 + (‚Ñì + 3) / 2 * (‚Ñì + 1) - (Œ± + 1) * (‚Ñì - 1) + (Œ± + 1) * (‚Ñì - 1) ‚â•
        (‚Ñì ^ 2 - 1) / 2 + (Œ± + 1) * (‚Ñì - 1) := by
      exact Nat.add_le_add_right aleb ((Œ± + 1) * (‚Ñì - 1))

    trans (‚Ñì ^ 2 - 1) / 2 + (‚Ñì + 3) / 2 * (‚Ñì + 1) - (Œ± + 1) * (‚Ñì - 1) + (Œ± + 1) * (‚Ñì - 1)
    apply le_of_eq; apply Nat.sub_add_cancel
    {
      apply le_of_lt; by_contra! theweeds
      have : (‚Ñì ^ 2 - 1) / 2 + (‚Ñì + 3) / 2 * (‚Ñì + 1) - (Œ± + 1) * (‚Ñì - 1) = 0 :=
        Nat.sub_eq_zero_of_le theweeds
      rw[this] at h
      have bound : ùîÄ (Œò^[(‚Ñì + 3) / 2] (f ‚Ñì)) > 0 := calc
        _ ‚â• ùîÄ (f ‚Ñì) := le_Filt_Theta_fl _
        _ = (‚Ñì^2 - 1)/2 := Filt_fl
        _ ‚â• (‚Ñì^2 - 1)/24 :=
          Nat.div_le_div_left Nat.AtLeastTwo.prop zero_lt_two
        _ > 0 := delta_pos
      omega
    }
    exact Nat.add_le_add_iff_right.mpr aleb

  by_contra! alarge
  have a1large : Œ± + 1 > (‚Ñì + 5)/2 := calc
    _ > (‚Ñì + 3)/2 + 1 := Nat.add_lt_add_right alarge 1
    _ = (‚Ñì + 5)/2 := by
      rw [‚Üê Nat.add_div_right (‚Ñì + 3) (Nat.le.step Nat.le.refl)]

  have lg5 : ‚Ñì ‚â• 13 := Fact.out

  have l1g0 : ‚Ñì - 1 > 0 := by omega

  have lrw : (‚Ñì + 7)/2 = (‚Ñì + 5)/2 + 1 := calc
    _ = (‚Ñì + 5 + 2)/2 := rfl
    _ = (‚Ñì + 5)/2 + 2/2 := Nat.add_div_right (‚Ñì + 5) zero_lt_two


  have gge : (‚Ñì + 3)/2 * (‚Ñì + 1) ‚â• (‚Ñì + 7)/2 * (‚Ñì - 1) := calc
    _ ‚â• (Œ± + 1) * (‚Ñì - 1) := this
    _ ‚â• (‚Ñì + 7)/2 * (‚Ñì - 1) := by
      apply Nat.mul_le_mul_right
      apply Nat.le_of_lt_add_one at a1large
      rw[lrw]; apply Nat.add_le_add_right a1large


  have rw1 : (‚Ñì + 3)/2 * (‚Ñì + 1) = (‚Ñì + 3) * (‚Ñì + 1) / 2 := by
    apply Nat.div_mul_right_comm
    obtain ‚ü®k,hk‚ü© := Oddl
    use k + 2; rw[hk]; ring

  have rw2 : (‚Ñì + 7)/2 * (‚Ñì - 1) = (‚Ñì + 7) * (‚Ñì - 1) / 2 := by
    apply Nat.div_mul_right_comm
    obtain ‚ü®k,hk‚ü© := Oddl
    use k + 4; rw[hk]; ring

  rw[rw1,rw2] at gge

  have rw3 : (‚Ñì + 3) * (‚Ñì + 1) = ‚Ñì^2 + (4*‚Ñì + 3) := by group

  have rw4 : (‚Ñì + 7) * (‚Ñì - 1) = ‚Ñì^2 + 6*‚Ñì - 7 := by
    trans (‚Ñì + 7) * ‚Ñì - (‚Ñì + 7)
    exact Nat.mul_sub_one (‚Ñì + 7) ‚Ñì
    rw[add_mul, pow_two]
    trans ‚Ñì * ‚Ñì + (7 * ‚Ñì - ‚Ñì) - 7
    omega
    omega

  have rw5 : ‚Ñì^2 + 6*‚Ñì - 7 = ‚Ñì^2 + (6*‚Ñì - 7) :=
    Nat.add_sub_assoc (by omega) (‚Ñì ^ 2)


  have glgl : (‚Ñì + 3) * (‚Ñì + 1) / 2 < (‚Ñì + 7) * (‚Ñì - 1) / 2 := by
    rw[Nat.div_lt_div_right two_ne_zero]
    rw[rw3,rw4,rw5]; apply add_lt_add_left
    calc
      _ < 4 * ‚Ñì + ‚Ñì := add_lt_add_left (Nat.lt_of_add_left_lt lg5) (4*‚Ñì)
      _ = 5 * ‚Ñì := (Nat.succ_mul 4 ‚Ñì).symm
      _ ‚â§ 6 * ‚Ñì - ‚Ñì := by
        apply le_of_eq; exact Eq.symm (Nat.sub_eq_of_eq_add (Nat.succ_mul 5 ‚Ñì))
      _ ‚â§ _ := by apply Nat.sub_le_sub_left (by omega)

    apply Nat.dvd_mul_left_of_dvd
    obtain ‚ü®k,hk‚ü© := Oddl
    use k + 1; rw[hk]; ring
    suffices 2 ‚à£ (‚Ñì - 1) by omega
    obtain ‚ü®k,hk‚ü© := Oddl
    use k; rw [hk, add_tsub_cancel_right]

  exact (lt_iff_not_ge.1 glgl) gge


namespace Final.Hidden -- Œ±, j should not show up outside this file

noncomputable def alpha : ‚Ñï :=
  Nat.find exists_Filt_Theta_l_add_three_div_two

local notation "Œ±" => alpha


lemma alpha_bound : Œ± ‚â§ (‚Ñì + 3) / 2 :=
  let h := Nat.find_spec exists_Filt_Theta_l_add_three_div_two
  alpha_bound_ex h


lemma l_div_Filt_Theta_add (flu : f ‚Ñì |ùì§ = 0) : ‚Ñì ‚à£ ùîÄ (Œò^[(‚Ñì+3)/2 + (‚Ñì - 7)/2] (f ‚Ñì)) := by
  have : (‚Ñì + 3) / 2 + (‚Ñì - 7) / 2 = ‚Ñì - 2 := by
    trans ((‚Ñì + 3) + (‚Ñì - 7)) / 2
    refine Eq.symm (Nat.add_div_of_dvd_right ?_)
    obtain ‚ü®k,hk‚ü© := Oddl
    use k + 2; rw[hk]; ring
    have : ‚Ñì + 3 + (‚Ñì - 7) = 2*‚Ñì - 4 := by
      have : ‚Ñì ‚â• 13 := Fact.out
      omega
    rw[this]
    trans 2 * (‚Ñì - 2) / 2
    congr; omega
    exact Nat.mul_div_right (‚Ñì - 2) zero_lt_two

  rw[Filt_Theta_cast this]
  exact Filt_Theta_l_sub_two flu


noncomputable def j [Fact (f ‚Ñì |ùì§ = 0)] :=
  Nat.find ( ‚ü®(‚Ñì - 7)/2, l_div_Filt_Theta_add Fact.out‚ü© : ‚àÉ j, ‚Ñì ‚à£ ùîÄ (Œò^[(‚Ñì+3)/2 + j] (f ‚Ñì)) )

lemma j_bound [Fact (f ‚Ñì |ùì§ = 0)] : j ‚â§ (‚Ñì - 7)/2 := by
  rw [j, Nat.find_le_iff]
  use (‚Ñì - 7)/2, le_refl _
  exact l_div_Filt_Theta_add Fact.out



section omission_inequalities

omit [Fact (Nat.Prime ‚Ñì)] [Fact (‚Ñì ‚â• 5)] [Fact (‚Ñì ‚â• 13)]

@[simp] lemma Int.modEq_self  {n : ‚Ñ§} : n ‚â° 0 [ZMOD n] := by
  rw [Int.modEq_zero_iff_dvd]

lemma Int.modEq_of_Eq {a b n : ‚Ñ§} : a = b ‚Üí a ‚â° b [ZMOD n] := by
  intro h; rw[h]


lemma l_death_ineq [Fact (Nat.Prime ‚Ñì)] [Fact (‚Ñì ‚â• 5)] :
    (‚Ñì + 5) / 2 * (‚Ñì - 1) ‚â§ (‚Ñì + 3) / 2 * (‚Ñì + 1) :=
  calc

  _ = (‚Ñì + 5) * (‚Ñì - 1) / 2 := by
    refine Nat.div_mul_right_comm ?_ (‚Ñì - 1)
    obtain ‚ü®k,hk‚ü© := Oddl
    rw[hk]; use k + 3; ring

  _ ‚â§ (‚Ñì ^ 2 + 4 * ‚Ñì)/2 := by
    apply Nat.div_le_div_right;
    have rw1 : (‚Ñì + 5) * (‚Ñì - 1) = (‚Ñì + 5) * ‚Ñì - (‚Ñì + 5) := by
      exact Nat.mul_sub_one (‚Ñì + 5) ‚Ñì

    have rw2 : (‚Ñì + 5) * ‚Ñì - (‚Ñì + 5) = ‚Ñì * ‚Ñì + 5 * ‚Ñì - ‚Ñì - 5 := by
      rw[add_mul]; rfl

    have rw3 : ‚Ñì * ‚Ñì + 5 * ‚Ñì - ‚Ñì - 5 = ‚Ñì * ‚Ñì + (5* ‚Ñì - ‚Ñì) - 5 := by
      refine Mathlib.Tactic.LinearCombination'.pf_sub_c ?_ 5
      omega

    have rw4 : ‚Ñì * ‚Ñì + (5* ‚Ñì - ‚Ñì) - 5 = ‚Ñì ^ 2 + 4 * ‚Ñì - 5 := by
      rw[pow_two]; congr; omega

    rw [rw1,rw2,rw3,rw4]
    omega

  _ ‚â§ (‚Ñì + 3) * (‚Ñì + 1) / 2 := by
    apply Nat.div_le_div_right; ring_nf; omega

  _ = _ := by
    refine Nat.mul_div_right_comm ?_ (‚Ñì + 1)
    obtain ‚ü®k,hk‚ü© := Oddl
    rw[hk]; use k + 2; ring


lemma l_second_death : (‚Ñì + 5) * (‚Ñì - 1) ‚â§ (‚Ñì + 3) * (‚Ñì + 1) := calc

  _ ‚â§ ‚Ñì ^ 2 + 4 * ‚Ñì := by

    have rw1 : (‚Ñì + 5) * (‚Ñì - 1) = (‚Ñì + 5) * ‚Ñì - (‚Ñì + 5) := by
      exact Nat.mul_sub_one (‚Ñì + 5) ‚Ñì

    have rw2 : (‚Ñì + 5) * ‚Ñì - (‚Ñì + 5) = ‚Ñì * ‚Ñì + 5 * ‚Ñì - ‚Ñì - 5 := by
      rw[add_mul]; rfl

    have rw3 : ‚Ñì * ‚Ñì + 5 * ‚Ñì - ‚Ñì - 5 = ‚Ñì * ‚Ñì + (5* ‚Ñì - ‚Ñì) - 5 := by
      refine Mathlib.Tactic.LinearCombination'.pf_sub_c ?_ 5
      omega

    have rw4 : ‚Ñì * ‚Ñì + (5* ‚Ñì - ‚Ñì) - 5 = ‚Ñì ^ 2 + 4 * ‚Ñì - 5 := by
      rw[pow_two]; congr; omega

    rw [rw1,rw2,rw3,rw4]
    omega

  _ ‚â§ (‚Ñì + 3) * (‚Ñì + 1)  := by
      ring_nf; omega


end omission_inequalities



lemma m_death_ineq (m : ‚Ñï) : (Œ± + 1) * (‚Ñì - 1) ‚â§ (‚Ñì ^ 2 - 1) / 2 + ((‚Ñì + 3) / 2 + m) * (‚Ñì + 1) := by

  have lg : ‚Ñì ‚â• 13 := Fact.out
  trans ((‚Ñì + 3)/2 + 1) * (‚Ñì - 1)
  apply (mul_le_mul_right (by omega)).2
  apply add_le_add_right alpha_bound
  trans ((‚Ñì + 3) / 2) * (‚Ñì + 1); calc

    ((‚Ñì + 3) / 2 + 1) * (‚Ñì - 1) = ((‚Ñì + 5) / 2) * (‚Ñì - 1) := by
      congr; exact Eq.symm (Nat.div_eq_sub_div zero_lt_two (Nat.le_add_left 2 (‚Ñì + 3)))

    _ ‚â§ _ := l_death_ineq


  trans 0 + ((‚Ñì + 3)/2 + 0) * (‚Ñì + 1)
  simp only [add_zero, zero_add, le_refl]
  apply add_le_add; exact Nat.zero_le ((‚Ñì ^ 2 - 1) / 2)
  apply Nat.mul_le_mul_right
  apply Nat.add_le_add_left (Nat.zero_le m)


lemma Filt_Theta_lej [Fact (f ‚Ñì |ùì§ = 0)] {m} (mle : m ‚â§ j) :
    ùîÄ (Œò^[(‚Ñì + 3)/2 + m] (f ‚Ñì)) = (‚Ñì^2 - 1)/2 + ((‚Ñì + 3)/2 + m) * (‚Ñì + 1) - (Œ± + 1) * (‚Ñì - 1) := by

  induction m with

  | zero => rw[add_zero, Nat.find_spec exists_Filt_Theta_l_add_three_div_two]; rfl

  | succ m ih =>

    {
      specialize ih (Nat.le_of_succ_le mle)
      have mlt : m < j := trans (lt_add_one m) mle

      have nmdiv : ¬¨ ‚Ñì ‚à£ ùîÄ (Œò^[(‚Ñì + 3) / 2 + m] (f ‚Ñì)) := by
        apply Nat.find_min at mlt; exact mlt

      have lrw : (‚Ñì + 3) / 2 + (m + 1) = (‚Ñì + 3) / 2 + m + 1 := (add_assoc ..).symm

      rw[(Filt_Theta_iff' lrw).2 nmdiv, ih]

      trans (‚Ñì ^ 2 - 1) / 2 + (((‚Ñì + 3) / 2 + m) * (‚Ñì + 1) + (‚Ñì + 1)) - (Œ± + 1) * (‚Ñì - 1)
      rw[‚Üê add_assoc, add_assoc]

      refine Eq.symm (Nat.sub_add_comm ?_)
      exact m_death_ineq m

      congr 2; ring
    }


lemma ldiv_j_add_a [Fact (f ‚Ñì |ùì§ = 0)] : ‚Ñì ‚à£ (j + 1) + (Œ± + 1) := by

  let k := (j : ‚Ñ§)
  let a := (Œ± : ‚Ñ§)
  let l := (‚Ñì : ‚Ñ§)

  have Oddel : Odd l := by
    obtain ‚ü®k,hk‚ü© := Oddl
    use k; unfold l; norm_cast

  obtain ‚ü®c, hc‚ü© := Oddel

  have divl : 2 ‚à£ l + 1 := by
    use c + 1; rw[hc]; ring


  have : (k + 1) + (a + 1) ‚â° 0 [ZMOD l]
  { calc

    _ ‚â° 0 + (k + 1) * (l + 1) - (a + 1)*(l - 1) [ZMOD l] := by
      rw[zero_add, sub_eq_add_neg]; gcongr
      trans (k + 1) * (0 + 1); rw[zero_add, mul_one]
      gcongr; exact Int.modEq_self.symm
      trans 0 + -(a + 1) * -1
      simp only [neg_add_rev, Int.reduceNeg, mul_neg, mul_one, neg_neg, zero_add, Int.ModEq.refl]
      simp only [mul_sub, neg_add_rev, Int.reduceNeg, mul_neg, mul_one, neg_neg, zero_add, neg_sub]
      nth_rw 1 [‚Üê add_zero (a + 1), sub_eq_add_neg]
      gcongr; trans - (a + 1) * 0
      rw[mul_zero]; trans -(a + 1) * l
      gcongr; exact Int.modEq_self.symm; rfl

    _ ‚â° (l^2 - 1)/2 + ((l + 1)/2 + (k + 1)) * (l + 1) - (a + 1) * (l - 1) [ZMOD l] := by

      nth_rw 3 [add_mul]; rw[‚Üê add_assoc]; gcongr; symm
      trans (l ^ 2 - 1) / 2 + (l + 1) * (l + 1) / 2
      congr; refine Eq.symm (Int.mul_ediv_assoc' (l + 1) divl)

      trans ((l ^ 2 - 1) + (l + 1) * (l + 1)) / 2
      apply Int.modEq_of_Eq
      refine Eq.symm (Int.add_ediv_of_dvd_right ?_)
      exact Dvd.dvd.mul_right divl (l + 1)


      ring_nf; trans l * 2 / 2 + l ^ 2 * 2 / 2
      apply Int.modEq_of_Eq; apply Int.add_ediv_of_dvd_right
      exact Int.dvd_mul_left ..
      trans l + l^2; congr <;>
      refine Int.mul_ediv_cancel _ two_ne_zero

      trans 0 + 0 ^ 2; gcongr <;> exact Int.modEq_self
      rfl

    _ = ùîÄ (Œò^[(‚Ñì + 3)/2 + j] (f ‚Ñì)) := by
      {
        symm
        suffices ùîÄ (Œò^[(‚Ñì + 3)/2 + j] (f ‚Ñì)) =
          (‚Ñì ^ 2 - 1) / 2 + ((‚Ñì + 3) / 2 + j) * (‚Ñì + 1) - (Œ± + 1) * (‚Ñì - 1) by

            rw[this]; unfold l k a;
            trans ‚Üë(((‚Ñì ^ 2 - 1) / 2 : ‚Ñï) + (((‚Ñì + 3) / 2 + j) : ‚Ñï) * ((‚Ñì + 1) : ‚Ñï)) - ‚Üë((Œ± + 1) * (‚Ñì - 1))
            refine Int.ofNat_sub ?_; exact m_death_ineq j

            trans ‚Üë((‚Ñì ^ 2 - 1) / 2 : ‚Ñï) + ‚Üë(((‚Ñì + 3) / 2 + j) : ‚Ñï) * ‚Üë((‚Ñì + 1) : ‚Ñï) - ‚Üë(Œ± + 1) * ‚Üë(‚Ñì - 1)
            rfl

            trans  ‚Üë((‚Ñì ^ 2 - 1) / 2 : ‚Ñï) + (‚Üë(((‚Ñì + 3) / 2 + j) : ‚Ñï) * ‚Üë((‚Ñì + 1) : ‚Ñï) - ‚Üë(Œ± + 1) * ‚Üë(‚Ñì - 1))
            apply Int.add_sub_assoc

            trans (‚Üë((‚Ñì ^ 2 - 1): ‚Ñï)) / 2 + (‚Üë(((‚Ñì + 3) / 2 + j) : ‚Ñï) * ‚Üë((‚Ñì + 1) : ‚Ñï) - ‚Üë(Œ± + 1) * ‚Üë(‚Ñì - 1))
            rfl

            trans (‚Üë‚Ñì ^ 2 - 1) / 2 + (‚Üë(((‚Ñì + 3) / 2 + j) : ‚Ñï) * ‚Üë((‚Ñì + 1) : ‚Ñï) - ‚Üë(Œ± + 1) * ‚Üë(‚Ñì - 1))
            have : ‚Üë((‚Ñì ^ 2 - 1): ‚Ñï) = ((‚Ñì ^ 2) : ‚Ñï) - (1 : ‚Ñ§) := by
              refine Int.natCast_pred_of_pos ?_; exact Nat.pos_of_neZero (‚Ñì ^ 2)
            rw[this]; rfl

            have rw1 : ‚Üë(((‚Ñì + 3) / 2 + j) : ‚Ñï) = ((‚Üë‚Ñì + 3) / 2 + ‚Üëj : ‚Ñ§) := rfl
            have rw2 : ‚Üë((‚Ñì + 1) : ‚Ñï) = (‚Üë‚Ñì + 1 : ‚Ñ§) := rfl
            have rw3 : ‚Üë((Œ± + 1) : ‚Ñï) = (‚ÜëŒ± + 1 : ‚Ñ§) := rfl
            have rw4 : ‚Üë(‚Ñì - 1) = (‚Üë‚Ñì - 1 : ‚Ñ§) := by
              apply Int.natCast_pred_of_pos (Nat.pos_of_neZero ‚Ñì)
            have rw5 : ((‚Üë‚Ñì + 1) / 2 + (‚Üëj + 1 : ‚Ñ§)) = (‚Üë‚Ñì + 3) / 2 + ‚Üëj := by
              trans (‚Üë‚Ñì + 1) / 2 + 2/2 + ‚Üëj
              ring; congr; trans (‚Üë‚Ñì + 1 + 2) / 2
              refine Eq.symm (Int.add_ediv_of_dvd_left ?_)
              exact divl; congr 1

            rw[rw1,rw2,rw3,rw4,rw5, Int.add_sub_assoc]

        exact Filt_Theta_lej (le_refl j)
      }


    _ ‚â° 0 [ZMOD l] := by
      rw[Int.modEq_zero_iff_dvd]
      have : ‚Ñì ‚à£ (ùîÄ (Œò^[(‚Ñì + 3) / 2 + j] (f ‚Ñì))) :=
        Nat.find_spec j._proof_1
      zify at this; exact this
  }

  unfold k a l Int.ModEq at this
  simp_all
  obtain ‚ü®k,hk‚ü© := this
  have kg0 : k ‚â• 0 := by
    apply le_of_eq at hk
    contrapose! hk
    calc
    ‚Üë‚Ñì * k < 0 := by
      apply mul_neg_of_pos_of_neg
      suffices ‚Ñì > 0 from Int.natCast_pos.mpr this
      exact Nat.pos_of_neZero ‚Ñì
      exact hk
    _ ‚â§ _ := by norm_cast; apply Nat.le_add_left

  use k.toNat; zify
  trans ‚Üë‚Ñì * k; exact hk
  congr; exact Int.eq_natCast_toNat.mpr kg0


lemma alpha_equal [Fact (f ‚Ñì |ùì§ = 0)] : Œ± + 1 = (‚Ñì + 5) / 2 := by

  have lel : (Œ± + 1) + (j + 1) ‚â• ‚Ñì := by
    apply Nat.le_of_dvd
    exact Nat.zero_lt_succ _
    rw[add_comm]; exact ldiv_j_add_a

  have lg : ‚Ñì ‚â• 13 := Fact.out

  apply eq_of_le_of_le

  trans (‚Ñì + 3)/2 + 1
  apply add_le_add_right; exact alpha_bound
  apply le_of_eq; omega

  contrapose! lel; calc
    _ < (‚Ñì + 5) / 2 + (j + 1) :=
      add_lt_add_right lel _
    _ ‚â§ (‚Ñì + 5) / 2 + ((‚Ñì - 7)/2 + 1) :=
      add_le_add_left (add_le_add_right j_bound _) _
    _ = (‚Ñì + 5) / 2 + (‚Ñì - 5)/2 := by
      congr; trans (‚Ñì - 7) / 2 + 2/2; rfl
      trans (‚Ñì - 7 + 2)/2
      exact Eq.symm (Nat.add_div_right (‚Ñì - 7) zero_lt_two)
      congr; omega
    _ = ((‚Ñì + 5) + (‚Ñì - 5)) / 2 := by
      symm; apply Nat.add_div_of_dvd_right
      obtain ‚ü®k,hk‚ü© := Oddl
      rw[hk]; use k + 3; ring
    _ = (‚Ñì + ‚Ñì) / 2 := by
      congr 1; omega
    _ = ‚Ñì :=
      Nat.div_eq_of_eq_mul_right zero_lt_two (by rw[two_mul])

end Final.Hidden

open Final.Hidden

-- (3.8)
theorem Filt_Theta_l_add_three_div_two (flu : f ‚Ñì |ùì§ = 0) :
    ùîÄ (Œò^[(‚Ñì + 3)/2] (f ‚Ñì)) = (‚Ñì^2 - 1)/2 + 4 := by

  have flufact : Fact (f ‚Ñì |ùì§ = 0) := ‚ü®flu‚ü©

  have lg : ‚Ñì ‚â• 13 := Fact.out

  rw[Nat.find_spec exists_Filt_Theta_l_add_three_div_two, ‚Üê alpha, alpha_equal]

  have rw1 : (‚Ñì ^ 2 - 1) / 2 + (‚Ñì + 3) / 2 * (‚Ñì + 1) - (‚Ñì + 5) / 2 * (‚Ñì - 1) =
      (‚Ñì ^ 2 - 1) / 2 + ((‚Ñì + 3) / 2 * (‚Ñì + 1) - (‚Ñì + 5) / 2 * (‚Ñì - 1)) := by
    apply Nat.add_sub_assoc
    exact l_death_ineq

  rw[rw1]; congr; calc

    _ = (‚Ñì + 3) * (‚Ñì + 1) / 2 - (‚Ñì + 5) * (‚Ñì - 1) / 2 := by
      congr <;> symm
      refine Nat.mul_div_right_comm ?_ (‚Ñì + 1)
      obtain ‚ü®k,hk‚ü© := Oddl
      rw[hk]; use k + 2; ring
      apply Nat.mul_div_right_comm
      obtain ‚ü®k,hk‚ü© := Oddl
      rw[hk]; use k + 3; ring

    _ = ((‚Ñì + 3) * (‚Ñì + 1) - (‚Ñì + 5) * (‚Ñì - 1)) / 2 := by
      zify; trans ‚Üë((‚Ñì + 3) * (‚Ñì + 1) / 2) - ‚Üë((‚Ñì + 5) * (‚Ñì - 1) / 2)
      refine Int.ofNat_sub ?_
      apply Nat.div_le_div_right; exact l_second_death
      trans ‚Üë((‚Ñì + 3) * (‚Ñì + 1)) / 2 - ‚Üë((‚Ñì + 5) * (‚Ñì - 1)) / 2
      rfl
      trans (‚Üë((‚Ñì + 3) * (‚Ñì + 1)) - ‚Üë((‚Ñì + 5) * (‚Ñì - 1))) / 2
      refine Eq.symm (Int.sub_ediv_of_dvd ‚Üë((‚Ñì + 3) * (‚Ñì + 1)) ?_)
      refine Int.ofNat_dvd_natCast.mpr ?_
      refine Nat.dvd_mul_right_of_dvd ?_ (‚Ñì - 1)
      obtain ‚ü®k,hk‚ü© := Oddl
      rw[hk]; use k + 3; ring
      congr; symm; refine Int.ofNat_sub ?_
      exact l_second_death

    _ = ((‚Ñì^2 + 4*‚Ñì + 3) - (‚Ñì^2 +4*‚Ñì - 5)) / 2 := by
      congr; ring
      trans (‚Ñì + 5) * ‚Ñì - (‚Ñì + 5)
      exact Nat.mul_sub_one (‚Ñì + 5) ‚Ñì
      trans ‚Ñì ^ 2 + (5*‚Ñì - ‚Ñì) - 5
      rw[add_mul, pow_two]
      omega
      omega

    _ = ((‚Ñì^2 + 4*‚Ñì + 3) - (‚Ñì^2 + 4*‚Ñì) + 5) / 2 := by
      congr; apply tsub_tsub_assoc
      exact Nat.le_add_right (‚Ñì ^ 2 + 4 * ‚Ñì) 3
      trans 13 ^ 2 + 4 * 13
      exact Nat.le_add_left 5 (13 ^ 2 + 47)
      apply add_le_add; exact Nat.pow_le_pow_left lg 2
      rwa[ mul_le_mul_left zero_lt_four]

    _ = ((‚Ñì^2 + 4*‚Ñì - (‚Ñì^2 + 4*‚Ñì) + 3 + 5)) / 2 := by
      congr; refine Nat.sub_add_comm (le_refl _)

    _ = (0 + 8) / 2 := by
      rw[add_assoc]; congr
      exact Eq.symm (Nat.eq_sub_of_add_eq' rfl)

    _ = 4 := rfl
